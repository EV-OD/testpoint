// Mocks generated by Mockito 5.4.6 from annotations
// in testpoint/test/widgets/test_basic_info_step_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:testpoint/models/group_model.dart' as _i5;
import 'package:testpoint/models/question_model.dart' as _i4;
import 'package:testpoint/models/test_model.dart' as _i6;
import 'package:testpoint/providers/test_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake
    implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTextEditingController_1 extends _i2.SmartFake
    implements _i1.TextEditingController {
  _FakeTextEditingController_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TestProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestProvider extends _i2.Mock implements _i3.TestProvider {
  MockTestProvider() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.FormState> get formKey =>
      (super.noSuchMethod(
            Invocation.getter(#formKey),
            returnValue: _FakeGlobalKey_0<_i1.FormState>(
              this,
              Invocation.getter(#formKey),
            ),
          )
          as _i1.GlobalKey<_i1.FormState>);

  @override
  _i1.TextEditingController get nameController =>
      (super.noSuchMethod(
            Invocation.getter(#nameController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#nameController),
            ),
          )
          as _i1.TextEditingController);

  @override
  _i1.TextEditingController get groupController =>
      (super.noSuchMethod(
            Invocation.getter(#groupController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#groupController),
            ),
          )
          as _i1.TextEditingController);

  @override
  _i1.TextEditingController get timeLimitController =>
      (super.noSuchMethod(
            Invocation.getter(#timeLimitController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#timeLimitController),
            ),
          )
          as _i1.TextEditingController);

  @override
  _i1.TextEditingController get dateController =>
      (super.noSuchMethod(
            Invocation.getter(#dateController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#dateController),
            ),
          )
          as _i1.TextEditingController);

  @override
  _i1.TextEditingController get timeController =>
      (super.noSuchMethod(
            Invocation.getter(#timeController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#timeController),
            ),
          )
          as _i1.TextEditingController);

  @override
  _i1.TextEditingController get questionTextController =>
      (super.noSuchMethod(
            Invocation.getter(#questionTextController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#questionTextController),
            ),
          )
          as _i1.TextEditingController);

  @override
  List<_i1.TextEditingController> get optionControllers =>
      (super.noSuchMethod(
            Invocation.getter(#optionControllers),
            returnValue: <_i1.TextEditingController>[],
          )
          as List<_i1.TextEditingController>);

  @override
  List<_i4.Question> get questions =>
      (super.noSuchMethod(
            Invocation.getter(#questions),
            returnValue: <_i4.Question>[],
          )
          as List<_i4.Question>);

  @override
  List<_i5.Group> get availableGroups =>
      (super.noSuchMethod(
            Invocation.getter(#availableGroups),
            returnValue: <_i5.Group>[],
          )
          as List<_i5.Group>);

  @override
  List<_i6.Test> get teacherTests =>
      (super.noSuchMethod(
            Invocation.getter(#teacherTests),
            returnValue: <_i6.Test>[],
          )
          as List<_i6.Test>);

  @override
  int get currentStep =>
      (super.noSuchMethod(Invocation.getter(#currentStep), returnValue: 0)
          as int);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isSaving =>
      (super.noSuchMethod(Invocation.getter(#isSaving), returnValue: false)
          as bool);

  @override
  int get selectedCorrectAnswer =>
      (super.noSuchMethod(
            Invocation.getter(#selectedCorrectAnswer),
            returnValue: 0,
          )
          as int);

  @override
  int get questionCount =>
      (super.noSuchMethod(Invocation.getter(#questionCount), returnValue: 0)
          as int);

  @override
  bool get canGoNext =>
      (super.noSuchMethod(Invocation.getter(#canGoNext), returnValue: false)
          as bool);

  @override
  bool get canGoPrevious =>
      (super.noSuchMethod(Invocation.getter(#canGoPrevious), returnValue: false)
          as bool);

  @override
  bool get isLastStep =>
      (super.noSuchMethod(Invocation.getter(#isLastStep), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void startNewTest() => super.noSuchMethod(
    Invocation.method(#startNewTest, []),
    returnValueForMissingStub: null,
  );

  @override
  void loadTestForEditing(_i6.Test? test) => super.noSuchMethod(
    Invocation.method(#loadTestForEditing, [test]),
    returnValueForMissingStub: null,
  );

  @override
  void nextStep() => super.noSuchMethod(
    Invocation.method(#nextStep, []),
    returnValueForMissingStub: null,
  );

  @override
  void previousStep() => super.noSuchMethod(
    Invocation.method(#previousStep, []),
    returnValueForMissingStub: null,
  );

  @override
  void goToStep(int? step) => super.noSuchMethod(
    Invocation.method(#goToStep, [step]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> saveBasicInfo() =>
      (super.noSuchMethod(
            Invocation.method(#saveBasicInfo, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void setSelectedCorrectAnswer(int? index) => super.noSuchMethod(
    Invocation.method(#setSelectedCorrectAnswer, [index]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> addQuestion() =>
      (super.noSuchMethod(
            Invocation.method(#addQuestion, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updateQuestion(int? index, _i4.Question? question) =>
      (super.noSuchMethod(
            Invocation.method(#updateQuestion, [index, question]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteQuestion(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#deleteQuestion, [index]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> loadAvailableGroups() =>
      (super.noSuchMethod(
            Invocation.method(#loadAvailableGroups, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> loadTeacherTests() =>
      (super.noSuchMethod(
            Invocation.method(#loadTeacherTests, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i6.Test?> getTestById(String? testId) =>
      (super.noSuchMethod(
            Invocation.method(#getTestById, [testId]),
            returnValue: _i7.Future<_i6.Test?>.value(),
          )
          as _i7.Future<_i6.Test?>);

  @override
  void selectGroup(String? groupId) => super.noSuchMethod(
    Invocation.method(#selectGroup, [groupId]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> publishTest() =>
      (super.noSuchMethod(
            Invocation.method(#publishTest, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
